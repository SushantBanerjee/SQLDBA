DECLARE @xp_results TABLE
(
	job_id                UNIQUEIDENTIFIER NOT NULL,
	last_run_date         INT              NOT NULL,
	last_run_time         INT              NOT NULL,
	next_run_date         INT              NOT NULL,
	next_run_time         INT              NOT NULL,
	next_run_schedule_id  INT              NOT NULL,
	requested_to_run      INT              NOT NULL, -- BOOL
	request_source        INT              NOT NULL,
	request_source_id     sysname          COLLATE database_default NULL,
	running               INT              NOT NULL, -- BOOL
	current_step          INT              NOT NULL,
	current_retry_attempt INT              NOT NULL,
	job_state             INT              NOT NULL
)

DECLARE @job_execution_state TABLE 
(
	job_id                  UNIQUEIDENTIFIER NOT NULL,
	date_started            INT              NOT NULL,
	time_started            INT              NOT NULL,
	execution_job_status    INT              NOT NULL,
	execution_step_id       INT              NULL,
	execution_step_name     sysname          COLLATE database_default NULL,
	execution_retry_attempt INT              NOT NULL,
	next_run_date           INT              NOT NULL,
	next_run_time           INT              NOT NULL,
	next_run_schedule_id    INT              NOT NULL,
	running					INT              NOT NULL -- BOOL
)

DECLARE @filtered_jobs TABLE 
(
	job_id                   UNIQUEIDENTIFIER NOT NULL,
	date_created             DATETIME         NOT NULL,
	date_last_modified       DATETIME         NOT NULL,
	current_execution_status INT              NULL,
	current_execution_step   sysname          COLLATE database_default NULL,
	current_retry_attempt    INT              NULL,
	last_run_date            INT              NOT NULL,
	last_run_time            INT              NOT NULL,
	last_run_outcome         INT              NOT NULL,
	next_run_date            INT              NULL,
	next_run_time            INT              NULL,
	next_run_schedule_id     INT              NULL,
	type                     INT              NOT NULL,
	running					 INT              NOT NULL -- BOOL
)


INSERT INTO @xp_results 
EXECUTE master.dbo.xp_sqlagent_enum_jobs 1, 'sa'--, @job_id

-- SELECT * FROM @xp_results


INSERT INTO @job_execution_state
  SELECT xpr.job_id,
         xpr.last_run_date,
         xpr.last_run_time,
         xpr.job_state,
         sjs.step_id,
         sjs.step_name,
         xpr.current_retry_attempt,
         xpr.next_run_date,
         xpr.next_run_time,
         xpr.next_run_schedule_id,
		 xpr.running
  FROM @xp_results                          xpr
       LEFT OUTER JOIN msdb.dbo.sysjobsteps sjs ON ((xpr.job_id = sjs.job_id) AND (xpr.current_step = sjs.step_id)),
       msdb.dbo.sysjobs_view                sjv
  WHERE (sjv.job_id = xpr.job_id)


 -- SELECT * FROM @job_execution_state


INSERT INTO @filtered_jobs
    SELECT sjv.job_id,
           sjv.date_created,
           sjv.date_modified,
           ISNULL(jes.execution_job_status, 4), -- Will be NULL if the job is non-local or is not in @job_execution_state (NOTE: 4 = STATE_IDLE)
           CASE ISNULL(jes.execution_step_id, 0)
             WHEN 0 THEN NULL                   -- Will be NULL if the job is non-local or is not in @job_execution_state
             ELSE CONVERT(NVARCHAR, jes.execution_step_id) + N' (' + jes.execution_step_name + N')'
           END,
           jes.execution_retry_attempt,         -- Will be NULL if the job is non-local or is not in @job_execution_state
           0,  -- last_run_date placeholder    (we'll fix it up in step 3.3)
           0,  -- last_run_time placeholder    (we'll fix it up in step 3.3)
           5,  -- last_run_outcome placeholder (we'll fix it up in step 3.3 - NOTE: We use 5 just in case there are no jobservers for the job)
           jes.next_run_date,                   -- Will be NULL if the job is non-local or is not in @job_execution_state
           jes.next_run_time,                   -- Will be NULL if the job is non-local or is not in @job_execution_state
           jes.next_run_schedule_id,            -- Will be NULL if the job is non-local or is not in @job_execution_state
           0,   -- type placeholder             (we'll fix it up in step 3.4)
		   ISNULL(jes.running,0)
    FROM msdb.dbo.sysjobs_view                sjv
         LEFT OUTER JOIN @job_execution_state jes ON (sjv.job_id = jes.job_id)
		 /*
    WHERE ((@schedule_id IS NULL)
      OR   (EXISTS(SELECT * 
                 FROM sysjobschedules as js
                 WHERE (sjv.job_id = js.job_id)
                   AND (js.schedule_id = @schedule_id))))
				   */

UPDATE @filtered_jobs
  SET current_execution_status = NULL
  WHERE (current_execution_status = 4)
    AND (job_id IN (SELECT job_id
                    FROM msdb.dbo.sysjobservers
                    WHERE (server_id <> 0)))

  -- Step 3.2: Check that if the user asked to see idle jobs that we still have some.
  --           If we don't have any then the query should return no rows.
  
 UPDATE @filtered_jobs
    SET last_run_date = sjs.last_run_date,
        last_run_time = sjs.last_run_time,
        last_run_outcome = sjs.last_run_outcome
    FROM @filtered_jobs         fj,
         msdb.dbo.sysjobservers sjs
    WHERE (fj.job_id = sjs.job_id)
  


  SELECT originating_server, sjv.name,sjv.enabled,fj.last_run_date, fj.last_run_time, fj.running, fj.last_run_outcome,
	CASE 
		WHEN fj.last_run_outcome = 0 THEN 'Failed'
        WHEN fj.last_run_outcome = 1 THEN 'Success'
        WHEN fj.last_run_outcome = 3 THEN 'Cancelled'
        ELSE 'Unknown'
	end AS Last_Run_OutCome_Description,
    next_run_date = ISNULL(fj.next_run_date, 0),                                 -- This column will be NULL if the job is non-local
    next_run_time = ISNULL(fj.next_run_time, 0),  
    current_execution_status = ISNULL(fj.current_execution_status, 0),           -- This column will be NULL if the job is non-local
    current_execution_step = ISNULL(fj.current_execution_step, N'0 ' + FORMATMESSAGE(14205)) -- This column will be NULL if the job is non-local

  FROM @filtered_jobs fj
       LEFT OUTER JOIN msdb.dbo.sysjobs_view  sjv ON (fj.job_id = sjv.job_id)
       LEFT OUTER JOIN msdb.dbo.sysoperators  so1 ON (sjv.notify_email_operator_id = so1.id)
       LEFT OUTER JOIN msdb.dbo.sysoperators  so2 ON (sjv.notify_netsend_operator_id = so2.id)
       LEFT OUTER JOIN msdb.dbo.sysoperators  so3 ON (sjv.notify_page_operator_id = so3.id)
       LEFT OUTER JOIN msdb.dbo.syscategories sc  ON (sjv.category_id = sc.category_id)
  -- ORDER BY sjv.job_id
  WHERE sjv.enabled=1
  -- AND sjv.name like '%full%backup%'
  AND (sjv.name like '%full%backup%' OR (sjv.name = 'DatabaseBackup - USER_DATABASES - FULL' and ISNULL(fj.next_run_date, 0) <> 0))
  AND (sjv.name <> 'DBA_copy_fullbackup_to_DR' AND sjv.name <> 'Temp_full_backup.Subplan_1')
  ORDER by name

  /*
  SELECT sjv.job_id,
         originating_server, 
         sjv.name,
         sjv.enabled,
         sjv.description,
         sjv.start_step_id,
         category = ISNULL(sc.name, FORMATMESSAGE(14205)),
         --owner = dbo.SQLAGENT_SUSER_SNAME(sjv.owner_sid),
         sjv.notify_level_eventlog,
         sjv.notify_level_email,
         sjv.notify_level_netsend,
         sjv.notify_level_page,
         notify_email_operator   = ISNULL(so1.name, FORMATMESSAGE(14205)),
         notify_netsend_operator = ISNULL(so2.name, FORMATMESSAGE(14205)),
         notify_page_operator    = ISNULL(so3.name, FORMATMESSAGE(14205)),
         sjv.delete_level,
         sjv.date_created,
         sjv.date_modified,
         sjv.version_number,
         fj.last_run_date,
         fj.last_run_time,
		 fj.running,
         fj.last_run_outcome,

		 CASE 
                WHEN fj.last_run_outcome = 0 THEN 'Failed'
                WHEN fj.last_run_outcome = 1 THEN 'Success'
                WHEN fj.last_run_outcome = 3 THEN 'Cancelled'
                ELSE 'Unknown'
            end AS Last_Run_OutCome_Description,

         next_run_date = ISNULL(fj.next_run_date, 0),                                 -- This column will be NULL if the job is non-local
         next_run_time = ISNULL(fj.next_run_time, 0),                                 -- This column will be NULL if the job is non-local
         next_run_schedule_id = ISNULL(fj.next_run_schedule_id, 0),                   -- This column will be NULL if the job is non-local
         current_execution_status = ISNULL(fj.current_execution_status, 0),           -- This column will be NULL if the job is non-local
         current_execution_step = ISNULL(fj.current_execution_step, N'0 ' + FORMATMESSAGE(14205)), -- This column will be NULL if the job is non-local
         current_retry_attempt = ISNULL(fj.current_retry_attempt, 0),                 -- This column will be NULL if the job is non-local
         has_step = (SELECT COUNT(*)
                     FROM msdb.dbo.sysjobsteps sjst
                     WHERE (sjst.job_id = sjv.job_id)),
         has_schedule = (SELECT COUNT(*)
                         FROM msdb.dbo.sysjobschedules sjsch
                         WHERE (sjsch.job_id = sjv.job_id)),
         has_target = (SELECT COUNT(*)
                       FROM msdb.dbo.sysjobservers sjs
                       WHERE (sjs.job_id = sjv.job_id)),
         type = fj.type
  FROM @filtered_jobs                         fj
       LEFT OUTER JOIN msdb.dbo.sysjobs_view  sjv ON (fj.job_id = sjv.job_id)
       LEFT OUTER JOIN msdb.dbo.sysoperators  so1 ON (sjv.notify_email_operator_id = so1.id)
       LEFT OUTER JOIN msdb.dbo.sysoperators  so2 ON (sjv.notify_netsend_operator_id = so2.id)
       LEFT OUTER JOIN msdb.dbo.sysoperators  so3 ON (sjv.notify_page_operator_id = so3.id)
       LEFT OUTER JOIN msdb.dbo.syscategories sc  ON (sjv.category_id = sc.category_id)
  -- ORDER BY sjv.job_id
  WHERE sjv.enabled=1
  AND sjv.name like '%full%backup%'
  ORDER by name
  */



  --SELECT * FROM @filtered_jobs

